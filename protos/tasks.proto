syntax = "proto3";

package badgerodon.tasks;
option go_package = "github.com/badgerodon/tasks/pkg/pb";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message Queue {
  // The RetryConfig contains fields for configuring task retries.
  message RetryConfig {
    // MaxAttempts is the maximum number of attempts before a task will be
    // considered failed.
    int32 max_attempts = 1;
    // MaxDuration is the maximum duration for the task.
    google.protobuf.Duration max_duration = 2;
    // MinBackoff is the minimum backoff time.
    google.protobuf.Duration min_backoff = 3;
    // MaxBackoff is the maximum backoff time.
    google.protobuf.Duration max_backoff = 4;
  }

  // ID is the queue id.
  string id = 1;
  // Name is the queue name.
  string name = 2;
  // RetryConfig indicates how the queue will handle task failure retries.
  RetryConfig retry_config = 3;
}

// A Task is a single unit of work.
message Task {
  // An Attempt is a single attempt at running a task.
  message Attempt {
    // ScheduledAt is when the attempt was scheduled.
    google.protobuf.Timestamp scheduled_at = 1;
    // LeasedAt is when the attempt was leased by a worker.
    google.protobuf.Timestamp leased_at = 2;
    // CompletedAt is when the attempt was completed succesfully.
    google.protobuf.Timestamp completed_at = 3;
    // FailedAt is when the attempt was failed.
    google.protobuf.Timestamp failed_at = 4;
    // FailedMessage is the reason for the failure.
    string failed_reason = 5;
  }

  enum InitiatorType {
    USER = 0;
    SCHEDULED_TASK = 1;
  }

  enum Status {
    NEW = 0;
    LEASED = 1;
    COMPLETED = 2;
    FAILED = 3;
  }

  // ID is a unique identifier for the task. If not provided it is
  // generated.
  string id = 1;
  // QueueID is the queue for the task.
  string queue_id = 2;
  // InitiatorType is either a user or a scheduled task.
  InitiatorType initiator_type = 3;
  // InitiatorId is the user id for user tasks, or the scheduled task id for
  // scheduled tasks.
  string initiator_id = 4;
  // GroupID is used to tie tasks together. If a task kicks off another
  // task, that new task will have the same GroupID.
  string group_id = 5;

  // Status indicates the task's status.
  Status status = 6;
  // Name is the task name.
  string name = 7;

  // CreatedAt indicates when the task was created.
  google.protobuf.Timestamp created_at = 8;
  // ScheduledAt indicates when the task is scheduled to be run.
  google.protobuf.Timestamp scheduled_at = 9;
  // Deadline indicates when the task must be completed by (including retries)
  // before its considered failed.
  google.protobuf.Timestamp deadline = 10;
  // Timeout is the maximum amount of time a single attempt can run.
  google.protobuf.Timestamp timeout = 11;
  // MaxAttempts is the maximum number of attempts that will be made before a
  // task is considered failed
  int32 max_attempts = 12;

  // Attempts are all the attempts that have been made. (output-only)
  repeated Attempt attempts = 13;
}

message AppendTaskLogsRequest {
  string task_id = 1;
  repeated string logs = 2;
}
message CompleteTaskRequest { string lease_id = 1; }
message DeleteTaskRequest { string task_id = 1; }
message GetTaskRequest { string task_id = 1; }
message GetTaskResponse { Task task = 1; }
message GetTaskLogsRequest { string task_id = 1; }
message GetTaskLogsResponse { repeated string logs = 1; }
message FailTaskRequest {
  string lease_id = 1;
  string error_message = 2;
}
message LeaseTaskRequest {
  string queue_id = 1;
  google.protobuf.Duration duration = 2;
}
message LeaseTaskResponse {
  string lease_id = 1;
  Task task = 2;
}
message ListTasksRequest {
  string queue_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}
message ListTasksResponse {
  repeated Task tasks = 1;
  string next_page_token = 2;
}
message RenewTaskLeaseRequest {
  string lease_id = 1;
  google.protobuf.Duration duration = 2;
}
message SubmitTaskRequest { Task task = 1; }

service Tasks {
  // viewing
  rpc DeleteTask(DeleteTaskRequest) returns (google.protobuf.Empty);
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse);
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);

  // leasing
  rpc CompleteTask(CompleteTaskRequest) returns (google.protobuf.Empty);
  rpc LeaseTask(LeaseTaskRequest) returns (LeaseTaskResponse);
  rpc RenewTaskLease(RenewTaskLeaseRequest) returns (google.protobuf.Empty);
  rpc SubmitTask(SubmitTaskRequest) returns (google.protobuf.Empty);

  // logs
  rpc AppendTaskLogs(AppendTaskLogsRequest) returns (google.protobuf.Empty);
  rpc GetTaskLogs(GetTaskLogsRequest) returns (GetTaskLogsResponse);
}
