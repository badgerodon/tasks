// @generated by protobuf-ts 2.0.0-alpha.27 with parameters client_none,generate_dependencies
// @generated from protobuf file "tasks.proto" (package "badgerodon.tasks", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Duration } from "./google/protobuf/duration";
/**
 * @generated from protobuf message badgerodon.tasks.Queue
 */
export interface Queue {
    /**
     * ID is the queue id.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Name is the queue name.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * RetryConfig indicates how the queue will handle task failure retries.
     *
     * @generated from protobuf field: badgerodon.tasks.Queue.RetryConfig retry_config = 3;
     */
    retryConfig?: Queue_RetryConfig;
}
/**
 * The RetryConfig contains fields for configuring task retries.
 *
 * @generated from protobuf message badgerodon.tasks.Queue.RetryConfig
 */
export interface Queue_RetryConfig {
    /**
     * MaxAttempts is the maximum number of attempts before a task will be
     * considered failed.
     *
     * @generated from protobuf field: int32 max_attempts = 1;
     */
    maxAttempts: number;
    /**
     * MaxDuration is the maximum duration for the task.
     *
     * @generated from protobuf field: google.protobuf.Duration max_duration = 2;
     */
    maxDuration?: Duration;
    /**
     * MinBackoff is the minimum backoff time.
     *
     * @generated from protobuf field: google.protobuf.Duration min_backoff = 3;
     */
    minBackoff?: Duration;
    /**
     * MaxBackoff is the maximum backoff time.
     *
     * @generated from protobuf field: google.protobuf.Duration max_backoff = 4;
     */
    maxBackoff?: Duration;
}
/**
 * A Task is a single unit of work.
 *
 * @generated from protobuf message badgerodon.tasks.Task
 */
export interface Task {
    /**
     * ID is a unique identifier for the task. If not provided it is
     * generated.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * QueueID is the queue for the task.
     *
     * @generated from protobuf field: string queue_id = 2;
     */
    queueId: string;
    /**
     * InitiatorType is either a user or a scheduled task.
     *
     * @generated from protobuf field: badgerodon.tasks.Task.InitiatorType initiator_type = 3;
     */
    initiatorType: Task_InitiatorType;
    /**
     * InitiatorId is the user id for user tasks, or the scheduled task id for
     * scheduled tasks.
     *
     * @generated from protobuf field: string initiator_id = 4;
     */
    initiatorId: string;
    /**
     * GroupID is used to tie tasks together. If a task kicks off another
     * task, that new task will have the same GroupID.
     *
     * @generated from protobuf field: string group_id = 5;
     */
    groupId: string;
    /**
     * Status indicates the task's status.
     *
     * @generated from protobuf field: badgerodon.tasks.Task.Status status = 6;
     */
    status: Task_Status;
    /**
     * Name is the task name.
     *
     * @generated from protobuf field: string name = 7;
     */
    name: string;
    /**
     * CreatedAt indicates when the task was created.
     *
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 8;
     */
    createdAt?: Timestamp;
    /**
     * ScheduledAt indicates when the task is scheduled to be run.
     *
     * @generated from protobuf field: google.protobuf.Timestamp scheduled_at = 9;
     */
    scheduledAt?: Timestamp;
    /**
     * Deadline indicates when the task must be completed by (including retries)
     * before its considered failed.
     *
     * @generated from protobuf field: google.protobuf.Timestamp deadline = 10;
     */
    deadline?: Timestamp;
    /**
     * Timeout is the maximum amount of time a single attempt can run.
     *
     * @generated from protobuf field: google.protobuf.Timestamp timeout = 11;
     */
    timeout?: Timestamp;
    /**
     * MaxAttempts is the maximum number of attempts that will be made before a
     * task is considered failed
     *
     * @generated from protobuf field: int32 max_attempts = 12;
     */
    maxAttempts: number;
    /**
     * Attempts are all the attempts that have been made. (output-only)
     *
     * @generated from protobuf field: repeated badgerodon.tasks.Task.Attempt attempts = 13;
     */
    attempts: Task_Attempt[];
}
/**
 * An Attempt is a single attempt at running a task.
 *
 * @generated from protobuf message badgerodon.tasks.Task.Attempt
 */
export interface Task_Attempt {
    /**
     * ScheduledAt is when the attempt was scheduled.
     *
     * @generated from protobuf field: google.protobuf.Timestamp scheduled_at = 1;
     */
    scheduledAt?: Timestamp;
    /**
     * LeasedAt is when the attempt was leased by a worker.
     *
     * @generated from protobuf field: google.protobuf.Timestamp leased_at = 2;
     */
    leasedAt?: Timestamp;
    /**
     * CompletedAt is when the attempt was completed succesfully.
     *
     * @generated from protobuf field: google.protobuf.Timestamp completed_at = 3;
     */
    completedAt?: Timestamp;
    /**
     * FailedAt is when the attempt was failed.
     *
     * @generated from protobuf field: google.protobuf.Timestamp failed_at = 4;
     */
    failedAt?: Timestamp;
    /**
     * FailedMessage is the reason for the failure.
     *
     * @generated from protobuf field: string failed_reason = 5;
     */
    failedReason: string;
}
/**
 * @generated from protobuf enum badgerodon.tasks.Task.InitiatorType
 */
export enum Task_InitiatorType {
    /**
     * @generated from protobuf enum value: USER = 0;
     */
    USER = 0,
    /**
     * @generated from protobuf enum value: SCHEDULED_TASK = 1;
     */
    SCHEDULED_TASK = 1
}
/**
 * @generated from protobuf enum badgerodon.tasks.Task.Status
 */
export enum Task_Status {
    /**
     * @generated from protobuf enum value: NEW = 0;
     */
    NEW = 0,
    /**
     * @generated from protobuf enum value: LEASED = 1;
     */
    LEASED = 1,
    /**
     * @generated from protobuf enum value: COMPLETED = 2;
     */
    COMPLETED = 2,
    /**
     * @generated from protobuf enum value: FAILED = 3;
     */
    FAILED = 3
}
/**
 * @generated from protobuf message badgerodon.tasks.AppendTaskLogsRequest
 */
export interface AppendTaskLogsRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
    /**
     * @generated from protobuf field: repeated string logs = 2;
     */
    logs: string[];
}
/**
 * @generated from protobuf message badgerodon.tasks.CompleteTaskRequest
 */
export interface CompleteTaskRequest {
    /**
     * @generated from protobuf field: string lease_id = 1;
     */
    leaseId: string;
}
/**
 * @generated from protobuf message badgerodon.tasks.DeleteTaskRequest
 */
export interface DeleteTaskRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
}
/**
 * @generated from protobuf message badgerodon.tasks.GetTaskRequest
 */
export interface GetTaskRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
}
/**
 * @generated from protobuf message badgerodon.tasks.GetTaskResponse
 */
export interface GetTaskResponse {
    /**
     * @generated from protobuf field: badgerodon.tasks.Task task = 1;
     */
    task?: Task;
}
/**
 * @generated from protobuf message badgerodon.tasks.GetTaskLogsRequest
 */
export interface GetTaskLogsRequest {
    /**
     * @generated from protobuf field: string task_id = 1;
     */
    taskId: string;
}
/**
 * @generated from protobuf message badgerodon.tasks.GetTaskLogsResponse
 */
export interface GetTaskLogsResponse {
    /**
     * @generated from protobuf field: repeated string logs = 1;
     */
    logs: string[];
}
/**
 * @generated from protobuf message badgerodon.tasks.FailTaskRequest
 */
export interface FailTaskRequest {
    /**
     * @generated from protobuf field: string lease_id = 1;
     */
    leaseId: string;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message badgerodon.tasks.LeaseTaskRequest
 */
export interface LeaseTaskRequest {
    /**
     * @generated from protobuf field: string queue_id = 1;
     */
    queueId: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 2;
     */
    duration?: Duration;
}
/**
 * @generated from protobuf message badgerodon.tasks.LeaseTaskResponse
 */
export interface LeaseTaskResponse {
    /**
     * @generated from protobuf field: string lease_id = 1;
     */
    leaseId: string;
    /**
     * @generated from protobuf field: badgerodon.tasks.Task task = 2;
     */
    task?: Task;
}
/**
 * @generated from protobuf message badgerodon.tasks.ListTasksRequest
 */
export interface ListTasksRequest {
    /**
     * @generated from protobuf field: string queue_id = 1;
     */
    queueId: string;
    /**
     * @generated from protobuf field: int32 page_size = 2;
     */
    pageSize: number;
    /**
     * @generated from protobuf field: string page_token = 3;
     */
    pageToken: string;
}
/**
 * @generated from protobuf message badgerodon.tasks.ListTasksResponse
 */
export interface ListTasksResponse {
    /**
     * @generated from protobuf field: repeated badgerodon.tasks.Task tasks = 1;
     */
    tasks: Task[];
    /**
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * @generated from protobuf message badgerodon.tasks.RenewTaskLeaseRequest
 */
export interface RenewTaskLeaseRequest {
    /**
     * @generated from protobuf field: string lease_id = 1;
     */
    leaseId: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 2;
     */
    duration?: Duration;
}
/**
 * @generated from protobuf message badgerodon.tasks.SubmitTaskRequest
 */
export interface SubmitTaskRequest {
    /**
     * @generated from protobuf field: badgerodon.tasks.Task task = 1;
     */
    task?: Task;
}
// @generated message type with reflection information, may provide speed optimized methods
class Queue$Type extends MessageType<Queue> {
    constructor() {
        super("badgerodon.tasks.Queue", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "retry_config", kind: "message", T: () => Queue_RetryConfig }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Queue): Queue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* badgerodon.tasks.Queue.RetryConfig retry_config */ 3:
                    message.retryConfig = Queue_RetryConfig.internalBinaryRead(reader, reader.uint32(), options, message.retryConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Queue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* badgerodon.tasks.Queue.RetryConfig retry_config = 3; */
        if (message.retryConfig)
            Queue_RetryConfig.internalBinaryWrite(message.retryConfig, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.Queue
 */
export const Queue = new Queue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Queue_RetryConfig$Type extends MessageType<Queue_RetryConfig> {
    constructor() {
        super("badgerodon.tasks.Queue.RetryConfig", [
            { no: 1, name: "max_attempts", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "max_duration", kind: "message", T: () => Duration },
            { no: 3, name: "min_backoff", kind: "message", T: () => Duration },
            { no: 4, name: "max_backoff", kind: "message", T: () => Duration }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Queue_RetryConfig): Queue_RetryConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 max_attempts */ 1:
                    message.maxAttempts = reader.int32();
                    break;
                case /* google.protobuf.Duration max_duration */ 2:
                    message.maxDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxDuration);
                    break;
                case /* google.protobuf.Duration min_backoff */ 3:
                    message.minBackoff = Duration.internalBinaryRead(reader, reader.uint32(), options, message.minBackoff);
                    break;
                case /* google.protobuf.Duration max_backoff */ 4:
                    message.maxBackoff = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxBackoff);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Queue_RetryConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 max_attempts = 1; */
        if (message.maxAttempts !== 0)
            writer.tag(1, WireType.Varint).int32(message.maxAttempts);
        /* google.protobuf.Duration max_duration = 2; */
        if (message.maxDuration)
            Duration.internalBinaryWrite(message.maxDuration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration min_backoff = 3; */
        if (message.minBackoff)
            Duration.internalBinaryWrite(message.minBackoff, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration max_backoff = 4; */
        if (message.maxBackoff)
            Duration.internalBinaryWrite(message.maxBackoff, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.Queue.RetryConfig
 */
export const Queue_RetryConfig = new Queue_RetryConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Task$Type extends MessageType<Task> {
    constructor() {
        super("badgerodon.tasks.Task", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "queue_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "initiator_type", kind: "enum", T: () => ["badgerodon.tasks.Task.InitiatorType", Task_InitiatorType] },
            { no: 4, name: "initiator_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "group_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "status", kind: "enum", T: () => ["badgerodon.tasks.Task.Status", Task_Status] },
            { no: 7, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 9, name: "scheduled_at", kind: "message", T: () => Timestamp },
            { no: 10, name: "deadline", kind: "message", T: () => Timestamp },
            { no: 11, name: "timeout", kind: "message", T: () => Timestamp },
            { no: 12, name: "max_attempts", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "attempts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Task_Attempt }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Task): Task {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string queue_id */ 2:
                    message.queueId = reader.string();
                    break;
                case /* badgerodon.tasks.Task.InitiatorType initiator_type */ 3:
                    message.initiatorType = reader.int32();
                    break;
                case /* string initiator_id */ 4:
                    message.initiatorId = reader.string();
                    break;
                case /* string group_id */ 5:
                    message.groupId = reader.string();
                    break;
                case /* badgerodon.tasks.Task.Status status */ 6:
                    message.status = reader.int32();
                    break;
                case /* string name */ 7:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 8:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp scheduled_at */ 9:
                    message.scheduledAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.scheduledAt);
                    break;
                case /* google.protobuf.Timestamp deadline */ 10:
                    message.deadline = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deadline);
                    break;
                case /* google.protobuf.Timestamp timeout */ 11:
                    message.timeout = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                case /* int32 max_attempts */ 12:
                    message.maxAttempts = reader.int32();
                    break;
                case /* repeated badgerodon.tasks.Task.Attempt attempts */ 13:
                    message.attempts.push(Task_Attempt.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Task, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string queue_id = 2; */
        if (message.queueId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.queueId);
        /* badgerodon.tasks.Task.InitiatorType initiator_type = 3; */
        if (message.initiatorType !== 0)
            writer.tag(3, WireType.Varint).int32(message.initiatorType);
        /* string initiator_id = 4; */
        if (message.initiatorId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.initiatorId);
        /* string group_id = 5; */
        if (message.groupId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.groupId);
        /* badgerodon.tasks.Task.Status status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* string name = 7; */
        if (message.name !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Timestamp created_at = 8; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp scheduled_at = 9; */
        if (message.scheduledAt)
            Timestamp.internalBinaryWrite(message.scheduledAt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deadline = 10; */
        if (message.deadline)
            Timestamp.internalBinaryWrite(message.deadline, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp timeout = 11; */
        if (message.timeout)
            Timestamp.internalBinaryWrite(message.timeout, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* int32 max_attempts = 12; */
        if (message.maxAttempts !== 0)
            writer.tag(12, WireType.Varint).int32(message.maxAttempts);
        /* repeated badgerodon.tasks.Task.Attempt attempts = 13; */
        for (let i = 0; i < message.attempts.length; i++)
            Task_Attempt.internalBinaryWrite(message.attempts[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.Task
 */
export const Task = new Task$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Task_Attempt$Type extends MessageType<Task_Attempt> {
    constructor() {
        super("badgerodon.tasks.Task.Attempt", [
            { no: 1, name: "scheduled_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "leased_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "completed_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "failed_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "failed_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Task_Attempt): Task_Attempt {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp scheduled_at */ 1:
                    message.scheduledAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.scheduledAt);
                    break;
                case /* google.protobuf.Timestamp leased_at */ 2:
                    message.leasedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.leasedAt);
                    break;
                case /* google.protobuf.Timestamp completed_at */ 3:
                    message.completedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.completedAt);
                    break;
                case /* google.protobuf.Timestamp failed_at */ 4:
                    message.failedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.failedAt);
                    break;
                case /* string failed_reason */ 5:
                    message.failedReason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Task_Attempt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp scheduled_at = 1; */
        if (message.scheduledAt)
            Timestamp.internalBinaryWrite(message.scheduledAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp leased_at = 2; */
        if (message.leasedAt)
            Timestamp.internalBinaryWrite(message.leasedAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp completed_at = 3; */
        if (message.completedAt)
            Timestamp.internalBinaryWrite(message.completedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp failed_at = 4; */
        if (message.failedAt)
            Timestamp.internalBinaryWrite(message.failedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string failed_reason = 5; */
        if (message.failedReason !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.failedReason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.Task.Attempt
 */
export const Task_Attempt = new Task_Attempt$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppendTaskLogsRequest$Type extends MessageType<AppendTaskLogsRequest> {
    constructor() {
        super("badgerodon.tasks.AppendTaskLogsRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "logs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppendTaskLogsRequest): AppendTaskLogsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* repeated string logs */ 2:
                    message.logs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppendTaskLogsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* repeated string logs = 2; */
        for (let i = 0; i < message.logs.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.logs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.AppendTaskLogsRequest
 */
export const AppendTaskLogsRequest = new AppendTaskLogsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompleteTaskRequest$Type extends MessageType<CompleteTaskRequest> {
    constructor() {
        super("badgerodon.tasks.CompleteTaskRequest", [
            { no: 1, name: "lease_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompleteTaskRequest): CompleteTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string lease_id */ 1:
                    message.leaseId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompleteTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string lease_id = 1; */
        if (message.leaseId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leaseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.CompleteTaskRequest
 */
export const CompleteTaskRequest = new CompleteTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTaskRequest$Type extends MessageType<DeleteTaskRequest> {
    constructor() {
        super("badgerodon.tasks.DeleteTaskRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTaskRequest): DeleteTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.DeleteTaskRequest
 */
export const DeleteTaskRequest = new DeleteTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskRequest$Type extends MessageType<GetTaskRequest> {
    constructor() {
        super("badgerodon.tasks.GetTaskRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskRequest): GetTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.GetTaskRequest
 */
export const GetTaskRequest = new GetTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskResponse$Type extends MessageType<GetTaskResponse> {
    constructor() {
        super("badgerodon.tasks.GetTaskResponse", [
            { no: 1, name: "task", kind: "message", T: () => Task }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskResponse): GetTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* badgerodon.tasks.Task task */ 1:
                    message.task = Task.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* badgerodon.tasks.Task task = 1; */
        if (message.task)
            Task.internalBinaryWrite(message.task, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.GetTaskResponse
 */
export const GetTaskResponse = new GetTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskLogsRequest$Type extends MessageType<GetTaskLogsRequest> {
    constructor() {
        super("badgerodon.tasks.GetTaskLogsRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskLogsRequest): GetTaskLogsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskLogsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.GetTaskLogsRequest
 */
export const GetTaskLogsRequest = new GetTaskLogsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTaskLogsResponse$Type extends MessageType<GetTaskLogsResponse> {
    constructor() {
        super("badgerodon.tasks.GetTaskLogsResponse", [
            { no: 1, name: "logs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTaskLogsResponse): GetTaskLogsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string logs */ 1:
                    message.logs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTaskLogsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string logs = 1; */
        for (let i = 0; i < message.logs.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.logs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.GetTaskLogsResponse
 */
export const GetTaskLogsResponse = new GetTaskLogsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FailTaskRequest$Type extends MessageType<FailTaskRequest> {
    constructor() {
        super("badgerodon.tasks.FailTaskRequest", [
            { no: 1, name: "lease_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FailTaskRequest): FailTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string lease_id */ 1:
                    message.leaseId = reader.string();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FailTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string lease_id = 1; */
        if (message.leaseId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leaseId);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.FailTaskRequest
 */
export const FailTaskRequest = new FailTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaseTaskRequest$Type extends MessageType<LeaseTaskRequest> {
    constructor() {
        super("badgerodon.tasks.LeaseTaskRequest", [
            { no: 1, name: "queue_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaseTaskRequest): LeaseTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string queue_id */ 1:
                    message.queueId = reader.string();
                    break;
                case /* google.protobuf.Duration duration */ 2:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaseTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string queue_id = 1; */
        if (message.queueId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.queueId);
        /* google.protobuf.Duration duration = 2; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.LeaseTaskRequest
 */
export const LeaseTaskRequest = new LeaseTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaseTaskResponse$Type extends MessageType<LeaseTaskResponse> {
    constructor() {
        super("badgerodon.tasks.LeaseTaskResponse", [
            { no: 1, name: "lease_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "task", kind: "message", T: () => Task }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaseTaskResponse): LeaseTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string lease_id */ 1:
                    message.leaseId = reader.string();
                    break;
                case /* badgerodon.tasks.Task task */ 2:
                    message.task = Task.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaseTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string lease_id = 1; */
        if (message.leaseId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leaseId);
        /* badgerodon.tasks.Task task = 2; */
        if (message.task)
            Task.internalBinaryWrite(message.task, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.LeaseTaskResponse
 */
export const LeaseTaskResponse = new LeaseTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTasksRequest$Type extends MessageType<ListTasksRequest> {
    constructor() {
        super("badgerodon.tasks.ListTasksRequest", [
            { no: 1, name: "queue_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTasksRequest): ListTasksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string queue_id */ 1:
                    message.queueId = reader.string();
                    break;
                case /* int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 3:
                    message.pageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTasksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string queue_id = 1; */
        if (message.queueId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.queueId);
        /* int32 page_size = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* string page_token = 3; */
        if (message.pageToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.ListTasksRequest
 */
export const ListTasksRequest = new ListTasksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTasksResponse$Type extends MessageType<ListTasksResponse> {
    constructor() {
        super("badgerodon.tasks.ListTasksResponse", [
            { no: 1, name: "tasks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Task },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTasksResponse): ListTasksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated badgerodon.tasks.Task tasks */ 1:
                    message.tasks.push(Task.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTasksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated badgerodon.tasks.Task tasks = 1; */
        for (let i = 0; i < message.tasks.length; i++)
            Task.internalBinaryWrite(message.tasks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.ListTasksResponse
 */
export const ListTasksResponse = new ListTasksResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RenewTaskLeaseRequest$Type extends MessageType<RenewTaskLeaseRequest> {
    constructor() {
        super("badgerodon.tasks.RenewTaskLeaseRequest", [
            { no: 1, name: "lease_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RenewTaskLeaseRequest): RenewTaskLeaseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string lease_id */ 1:
                    message.leaseId = reader.string();
                    break;
                case /* google.protobuf.Duration duration */ 2:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RenewTaskLeaseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string lease_id = 1; */
        if (message.leaseId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.leaseId);
        /* google.protobuf.Duration duration = 2; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.RenewTaskLeaseRequest
 */
export const RenewTaskLeaseRequest = new RenewTaskLeaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitTaskRequest$Type extends MessageType<SubmitTaskRequest> {
    constructor() {
        super("badgerodon.tasks.SubmitTaskRequest", [
            { no: 1, name: "task", kind: "message", T: () => Task }
        ]);
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitTaskRequest): SubmitTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* badgerodon.tasks.Task task */ 1:
                    message.task = Task.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* badgerodon.tasks.Task task = 1; */
        if (message.task)
            Task.internalBinaryWrite(message.task, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message badgerodon.tasks.SubmitTaskRequest
 */
export const SubmitTaskRequest = new SubmitTaskRequest$Type();
/**
 * @generated ServiceType for protobuf service badgerodon.tasks.Tasks
 */
export const Tasks = new ServiceType("badgerodon.tasks.Tasks", [
    { name: "DeleteTask", options: {}, I: DeleteTaskRequest, O: Empty },
    { name: "GetTask", options: {}, I: GetTaskRequest, O: GetTaskResponse },
    { name: "ListTasks", options: {}, I: ListTasksRequest, O: ListTasksResponse },
    { name: "CompleteTask", options: {}, I: CompleteTaskRequest, O: Empty },
    { name: "LeaseTask", options: {}, I: LeaseTaskRequest, O: LeaseTaskResponse },
    { name: "RenewTaskLease", options: {}, I: RenewTaskLeaseRequest, O: Empty },
    { name: "SubmitTask", options: {}, I: SubmitTaskRequest, O: Empty },
    { name: "AppendTaskLogs", options: {}, I: AppendTaskLogsRequest, O: Empty },
    { name: "GetTaskLogs", options: {}, I: GetTaskLogsRequest, O: GetTaskLogsResponse }
]);
